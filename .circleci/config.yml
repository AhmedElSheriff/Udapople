version: 2.1

orbs:
  slack: circleci/slack@4.10.1

defaults: &dockerdefault
  docker:
    - image: circleci/node:13.8.0

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>


jobs:
  build-frontend:
    <<: *dockerdefault
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build


  build-backend:
    <<: *dockerdefault
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Build back-end
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    <<: *dockerdefault
    steps:
      - checkout
      - restore_cache:
          keys:
            - "frontend-build"
      - run: 
          name: Test Frontend
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    <<: *dockerdefault
    steps:
      - checkout
      - restore_cache:
          keys:
            - "backend-build"
      - run: 
          name: Test Backend
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    <<: *dockerdefault
    steps:
      - checkout
      - restore_cache:
          keys:
            - "npm-packages"
      - run: 
          name: Analyze Frontend
          command: |
            cd frontend
            # npm install
            npm install --save-dev webpack-cli@4.10.0
            npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - slack/notify:
          event: fail
          template: basic_fail_1
          channel: $SLACK_DEFAULT_CHANNEL

  scan-backend:
    <<: *dockerdefault
    steps:
      - checkout
      - restore_cache:
          keys:
            - "npm-packages"
      - run: 
          name: Analyze Backend
          command: |
            cd frontend
            # npm install
            npm install --save-dev webpack-cli@4.10.0
            npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - slack/notify:
          event: fail
          template: basic_fail_1
          channel: $SLACK_DEFAULT_CHANNEL

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar and gzip
          command: |
            apt install tar gzip -y
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} 
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output txt >> ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment     
        when: on_fail

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
          context: $SLACK_ACCESS_TOKEN
      - scan-backend:
          requires: [build-backend]
          context: $SLACK_ACCESS_TOKEN
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
